
# EXAMPLE:
# node {
#  calculator : "CheekLandmarkCpu"
#  input_stream : "IMAGE:cropped_cheek_image"
#  input_stream : "BLENDSHAPES:face_blendshapes"
#  output_stream : "BLENDSHAPES:face_blendshapes_updated"
# }

type: "CheekLandmarkCpu"


input_stream: "IMAGE:cropped_cheek_image"
input_stream: "BLENDSHAPES:face_blendshapes"
output_stream: "BLENDSHAPES:face_blendshapes_updated"

# Transforms the input image into a 64x64 tensor.
node: {
  calculator: "ImageToTensorCalculator"
  input_stream: "IMAGE:cropped_cheek_image"
  output_stream: "TENSORS:input_tensors"
  options: {
    [mediapipe.ImageToTensorCalculatorOptions.ext] {
      output_tensor_width: 64
      output_tensor_height: 64
      output_tensor_float_range {
        min: -1.0
        max: 1.0
      }
    }
  }
}

# Loads the face landmarks TF Lite model.
node {
  calculator: "CheekLandmarksModelLoader"
  output_side_packet: "MODEL:model"
}

# Generates a single side packet containing a TensorFlow Lite op resolver that
# supports custom ops needed by the model used in this graph.
node {
  calculator: "TfLiteCustomOpResolverCalculator"
  output_side_packet: "OP_RESOLVER:op_resolver"
}

# Runs a TensorFlow Lite model on CPU that takes an image tensor and outputs a
# vector of tensors representing, for instance, detection boxes/keypoints and
# scores.
node {
  calculator: "InferenceCalculator"
  input_stream: "TENSORS:input_tensors"
  input_side_packet: "MODEL:model"
  input_side_packet: "OP_RESOLVER:op_resolver"
  output_stream: "TENSORS:output_tensors"
  options: {
    [mediapipe.InferenceCalculatorOptions.ext] {
      delegate { xnnpack {} }
    }
  }
}

node{
  calculator: "BlendShapeEnhancer"
  input_stream: "BLENDSHAPES:face_blendshapes"
  input_stream: "TENSORS:output_tensors"
  output_stream: "BLENDSHAPES:face_blendshapes_updated"
}

